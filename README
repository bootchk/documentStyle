
Copyright 2012 Lloyd Konneker

This is free software, covered by the GNU General Public License.


About
=====

This is a subsystem of classes for styling document elements of a document.

The subsystem includes GUI, for editing stylesheets and editing the style of document elements.

One emphasis is on understandable object design (not performance.)  
Certain of the classes (e.g. StyleSheet, Selector) are familiar.
Other classes (abstractions) might be new to you.

See the test app: testStyling.py.  It uses this subsystem to style a document of QGraphicsItems.
The app lets you experience cascading style.

The subsystem uses the Qt framework.  It should be adaptable to other frameworks.


API
===

This discusses the interface between an app and the DocumentStyle subsystem.

See testStyling.py as an example.

DocumentElements should multiply inherit Styleable.
DocumentElements at initialization should call Styleable.setStylingDocumentElementType() 
with one of DocumentElementStylingTypes ...  This creates a Styler for the DocumentElement.

Application should:
- create StyleSheetCascadion initialization time (built-in certain names: 
  docStyleSheet, userStyleSheet, appStyleSheet
- call StyleSheet.edit() when user requests.
- connect styleSheetCascadion signal to app's polish() method
- have a polish method, which should call Styleable.polish() method of all DocumentElements
(the app knows the set of DocumentElements.)

Application should also:
- persist the DocumentStyleSheet with the Document TODO
Note that the ApplicationStyleSheet actually comes from the framework's defaults, not the application.
The DocumentElement attributes that contain the style should also be persisted,
but DocumentStyle subsystem doesn't know those attributes except via a Styler.


App requirements on a styling subsystem
=======================================

Persist style of document elements with the document.
Persist document stylesheet with the document.
Persist user stylesheet as settings.
Persist app stylesheet.

Reset stylesheets TODO


Styling subsystem requirements
==============================
Styling systems can support:
- named styles
- cascading stylesheets OR templating stylesheets

The styling system discussed in Wirfs-Brock supports named styles but not cascading.
This subsystem supports cascading stylesheets.
It is designed to also support named styles (but they are FUTURE.)
Templating stylesheets is supported but broken.


Object models for style
=======================

I don't know of any really good discussion of object models for styling documents.

See Wirfs-Brock "Designing Object Oriented Software" for a basic discussion of named styling of documents.

The W3C Cascading Stylesheet (CSS) specification is mostly about serialization and browsers.
But the W3C specs are poor as object models, especially about behavior.
This subsystem implements the behavior of some of the W3C CSS classes.
For example, Selector class.
For another example, our StylingAct class is roughly a W3C Descriptor.

The Qt framework has stylesheets that cascade, but they are specific to style of application widgets, for platform independence. 
This subsystem is not based on that object model (just uses them to style a few widgets so they reflect a user-chosen style.)

Older Qt versions apparently had a QStyleSheet class for styling text documents, but this subsystem does not borrow that class.


Status
======
IN PROGRESS see the TODO list

Also TODO: singleton Styler for each kind of DocumentElement.
Factory for Styler.

